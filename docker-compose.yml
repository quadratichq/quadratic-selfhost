services:
  # base services - redis, postgres

  redis:
    image: redis/redis-stack:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
      - "8001:8001"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: "5s"
    volumes:
      - ./docker/redis/data:/data
    profiles:
      - pubsub

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      PGUSER: postgres
      POSTGRES_PASSWORD: postgres
      ADDITIONAL_DATABASES: kratos
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./docker/postgres/data:/var/lib/postgresql/data
      - ./docker/postgres/scripts:/docker-entrypoint-initdb.d
    profiles:
      - database

  caddy:
    image: caddy:latest
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/caddy/config/Caddyfile:/etc/caddy/Caddyfile
      - ./docker/caddy/data:/data/caddy
    profiles:
      - caddy
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # quadratic services - client, api, multiplayer, files, connection

  quadratic-client:
    image: ${ECR_URL}/quadratic-client:${IMAGE_TAG}
    container_name: client
    environment:
      VITE_DEBUG: 1
      VITE_QUADRATIC_API_URL: ${QUADRATIC_API_URL_EXTERNAL}
      VITE_QUADRATIC_MULTIPLAYER_URL: ${QUADRATIC_MULTIPLAYER_URL_EXTERNAL}
      VITE_QUADRATIC_CONNECTION_URL: ${QUADRATIC_CONNECTION_URL_EXTERNAL}
      VITE_STORAGE_TYPE: ${STORAGE_TYPE}
      VITE_AUTH_TYPE: ${AUTH_TYPE}
      VITE_AUTH0_ISSUER: ${AUTH0_ISSUER}
      VITE_AUTH0_DOMAIN: ${VITE_AUTH0_DOMAIN}
      VITE_AUTH0_CLIENT_ID: ${VITE_AUTH0_CLIENT_ID}
      VITE_AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      VITE_ORY_HOST: ${KRATOS_URL_EXTERNAL}
      VITE_WORKOS_CLIENT_ID: ${WORKOS_CLIENT_ID}
    ports:
      - "3000:80"
    entrypoint: []
    command: >
      /bin/sh -c "/client/scripts/replace_env_vars.sh && nginx -g \"daemon off;\""
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://host.docker.internal:3000/ || exit 1"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 10
    restart: "always"
    volumes:
      - ./docker/client:/client
      - ./docker/client/config/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/client/config/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      quadratic-api:
        condition: service_started
    profiles:
      - quadratic
      - quadratic_client
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  quadratic-api:
    image: ${ECR_URL}/quadratic-api:${IMAGE_TAG}
    container_name: api
    environment:
      ENVIRONMENT: ${ENVIRONMENT}
      CORS: "${QUADRATIC_API_CORS}"
      NODE_ENV: ${QUADRATIC_API_NODE_ENV}
      DATABASE_URL: ${DATABASE_DSN}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      SLACK_FEEDBACK_URL: ${SLACK_FEEDBACK_URL}
      BILLING_AI_USAGE_LIMIT: ${BILLING_AI_USAGE_LIMIT}
      GCP_REGION: ${GCP_REGION}
      GCP_REGION_ANTHROPIC: ${GCP_REGION_ANTHROPIC}
      GCP_PROJECT_ID: ${GCP_PROJECT_ID}
      GCP_CLIENT_EMAIL: ${GCP_CLIENT_EMAIL}
      GCP_PRIVATE_KEY: ${GCP_PRIVATE_KEY}
      GCP_GEMINI_API_KEY: ${GCP_GEMINI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT}
      AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY}
      XAI_API_KEY: ${XAI_API_KEY}
      BASETEN_API_KEY: ${BASETEN_API_KEY}
      OPEN_ROUTER_API_KEY: ${OPEN_ROUTER_API_KEY}
      AWS_S3_REGION: ${AWS_S3_REGION}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
      AWS_S3_ACCESS_KEY_ID: ${AWS_S3_ACCESS_KEY_ID}
      AWS_S3_SECRET_ACCESS_KEY: ${AWS_S3_SECRET_ACCESS_KEY}
      M2M_AUTH_TOKEN: ${M2M_AUTH_TOKEN}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      AUTH_TYPE: ${AUTH_TYPE}
      AUTH0_JWKS_URI: ${JWKS_URI}
      AUTH0_ISSUER: ${AUTH0_ISSUER}
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      ORY_JWKS_URI: ${JWKS_URI}
      ORY_ADMIN_HOST: ${ORY_ADMIN_HOST}
      WORKOS_CLIENT_ID: ${WORKOS_CLIENT_ID}
      WORKOS_API_KEY: ${WORKOS_API_KEY}
      WORKOS_JWKS_URI: ${JWKS_URI}
      STORAGE_TYPE: ${STORAGE_TYPE}
      QUADRATIC_FILE_URI: ${QUADRATIC_FILES_URL_INTERNAL}
      QUADRATIC_FILE_URI_PUBLIC: ${QUADRATIC_FILES_URL_EXTERNAL}
      LICENSE_KEY: ${LICENSE_KEY}
      CONNECTION_DEMO: ${CONNECTION_DEMO}
    restart: "always"
    ports:
      - "8000:8000"
    command: bash -c "npx prisma migrate deploy --schema quadratic-api/prisma/schema.prisma && npm run start:prod --workspace=quadratic-api"
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - quadratic
      - quadratic_api
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  quadratic-multiplayer:
    image: ${ECR_URL}/quadratic-multiplayer:${IMAGE_TAG}
    container_name: multiplayer
    environment:
      RUST_LOG: ${QUADRATIC_MULTIPLAYER_RUST_LOG}
      HOST: ${QUADRATIC_MULTIPLAYER_HOST}
      PORT: ${QUADRATIC_MULTIPLAYER_PORT}
      HEARTBEAT_CHECK_S: ${QUADRATIC_MULTIPLAYER_HEARTBEAT_CHECK_S}
      HEARTBEAT_TIMEOUT_S: ${QUADRATIC_MULTIPLAYER_HEARTBEAT_TIMEOUT_S}
      QUADRATIC_API_URI: ${QUADRATIC_API_URL_INTERNAL}
      M2M_AUTH_TOKEN: ${M2M_AUTH_TOKEN}
      ENVIRONMENT: ${ENVIRONMENT}
      PUBSUB_HOST: ${PUBSUB_HOST}
      PUBSUB_PORT: ${PUBSUB_PORT}
      PUBSUB_PASSWORD: ${PUBSUB_PASSWORD}
      PUBSUB_ACTIVE_CHANNELS: ${PUBSUB_ACTIVE_CHANNELS}
      AUTH0_JWKS_URI: ${JWKS_URI}
      AUTHENTICATE_JWT: true
    restart: "always"
    ports:
      - "3001:3001"
    depends_on:
      redis:
        condition: service_healthy
      quadratic-client:
        condition: service_healthy
      quadratic-api:
        condition: service_started
    profiles:
      - quadratic
      - quadratic_multiplayer
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  quadratic-files:
    image: ${ECR_URL}/quadratic-files:${IMAGE_TAG}
    container_name: files
    environment:
      RUST_LOG: ${QUADRATIC_FILES_RUST_LOG}
      HOST: ${QUADRATIC_FILES_HOST}
      PORT: ${QUADRATIC_FILES_PORT}
      FILE_CHECK_S: ${QUADRATIC_FILES_FILE_CHECK_S}
      FILES_PER_CHECK: ${QUADRATIC_FILES_FILES_PER_CHECK}
      TRUNCATE_FILE_CHECK_S: ${QUADRATIC_FILES_TRUNCATE_FILE_CHECK_S}
      TRUNCATE_TRANSACTION_AGE_DAYS: ${QUADRATIC_FILES_TRUNCATE_TRANSACTION_AGE_DAYS}
      ENVIRONMENT: ${ENVIRONMENT}
      AUTH0_JWKS_URI: ${JWKS_URI}
      QUADRATIC_API_URI: ${QUADRATIC_API_URL_INTERNAL}
      M2M_AUTH_TOKEN: ${M2M_AUTH_TOKEN}
      PUBSUB_HOST: ${PUBSUB_HOST}
      PUBSUB_PORT: ${PUBSUB_PORT}
      PUBSUB_PASSWORD: ${PUBSUB_PASSWORD}
      PUBSUB_ACTIVE_CHANNELS: ${PUBSUB_ACTIVE_CHANNELS}
      PUBSUB_PROCESSED_TRANSACTIONS_CHANNEL: ${PUBSUB_PROCESSED_TRANSACTIONS_CHANNEL}
      STORAGE_TYPE: ${STORAGE_TYPE}
      AWS_S3_REGION: ${AWS_S3_REGION}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
      AWS_S3_ACCESS_KEY_ID: ${AWS_S3_ACCESS_KEY_ID}
      AWS_S3_SECRET_ACCESS_KEY: ${AWS_S3_SECRET_ACCESS_KEY}
      STORAGE_DIR: ${STORAGE_DIR}
      STORAGE_ENCRYPTION_KEYS: ${ENCRYPTION_KEY}
    restart: "always"
    ports:
      - "3002:3002"
    volumes:
      - ./docker/file-storage:/file-storage
    depends_on:
      redis:
        condition: service_healthy
      quadratic-client:
        condition: service_healthy
      quadratic-api:
        condition: service_started
    profiles:
      - quadratic
      - quadratic_files
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  quadratic-connection:
    image: ${ECR_URL}/quadratic-connection:${IMAGE_TAG}
    container_name: connection
    environment:
      RUST_LOG: ${QUADRATIC_CONNECTION_RUST_LOG}
      HOST: ${QUADRATIC_CONNECTION_HOST}
      PORT: ${QUADRATIC_CONNECTION_PORT}
      ENVIRONMENT: ${ENVIRONMENT}
      AUTH0_JWKS_URI: ${JWKS_URI}
      QUADRATIC_API_URI: ${QUADRATIC_API_URL_INTERNAL}
      M2M_AUTH_TOKEN: ${M2M_AUTH_TOKEN}
      MAX_RESPONSE_BYTES: ${QUADRATIC_CONNECTION_MAX_RESPONSE_BYTES}
      STATIC_IPS: ${QUADRATIC_CONNECTION_STATIC_IPS}
    restart: "always"
    ports:
      - "3003:3003"
    depends_on:
      quadratic-client:
        condition: service_healthy
      quadratic-api:
        condition: service_started
    profiles:
      - quadratic
      - quadratic_connection
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # auth service - ory

  ory-auth:
    image: oryd/kratos:v1.2.0
    container_name: ory-auth
    ports:
      - "4433:4433" # public
      - "4434:4434" # admin
    command: serve -c /etc/config/kratos/kratos.yml --dev --watch-courier
    volumes:
      - ./docker/ory-auth/config:/etc/config/kratos
    environment:
      DSN: ${ORY_DSN}
      LOG_LEVEL: ${ORY_LOG_LEVEL}
    restart: unless-stopped
    depends_on:
      - postgres
      - ory-auth-migrate
    profiles:
      - ory
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  ory-auth-migrate:
    image: oryd/kratos:v1.2.0
    container_name: ory-auth-migrate
    command: migrate -c /etc/config/kratos/kratos.yml sql -e --yes
    volumes:
      - ./docker/ory-auth/config:/etc/config/kratos
    environment:
      DSN: ${ORY_DSN}
    restart: on-failure
    depends_on:
      - postgres
    profiles:
      - ory
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  ory-auth-node:
    image: oryd/kratos-selfservice-ui-node:v1.2.0
    container_name: ory-auth-node
    ports:
      - "4455:4455"
    environment:
      PORT: ${KRATOS_NODE_PORT}
      KRATOS_PUBLIC_URL: ${KRATOS_URL_INTERNAL}
      KRATOS_BROWSER_URL: ${KRATOS_URL_EXTERNAL}
      COOKIE_SECRET: ${KRATOS_COOKIE_SECRET}
      CSRF_COOKIE_NAME: ${KRATOS_CSRF_COOKIE_NAME}
      CSRF_COOKIE_SECRET: ${KRATOS_CSRF_COOKIE_SECRET}
    restart: on-failure
    depends_on:
      - ory-auth
    profiles:
      - ory
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  ory-auth-mail:
    image: oryd/mailslurper:latest-smtps
    ports:
      - "1025:1025"
      - "4436:4436"
      - "4437:4437"
      - "8080:8080"
    profiles:
      - ory
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # databases to be used for testing by the connection service - postgres, mysql, mssql

  postgres-connection:
    image: postgres:15
    restart: always
    container_name: postgres-connection
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: postgres-connection
      POSTGRES_USER: user
      PGUSER: user
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d postgres-connection"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./docker/postgres-connection/data:/var/lib/postgresql/data
      - ./docker/postgres-connection/scripts:/docker-entrypoint-initdb.d
    profiles:
      - quadratic_connection_db
      - quadratic_connection_db_postgres
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  ssh-postgres-connection:
    build:
      context: .
      dockerfile: docker/ssh-postgres-connection/Dockerfile
    restart: always
    container_name: ssh-postgres-connection
    ports:
      - "2222:22"
    environment:
      POSTGRES_DB: ssh-postgres-connection
      POSTGRES_USER: user
      PGUSER: user
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d ssh-postgres-connection"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ssh-postgres-connection-data:/var/lib/postgresql/data
      - ./docker/postgres-connection/scripts:/docker-entrypoint-initdb.d
    profiles:
      - quadratic_connection_db
      - quadratic_connection_db_postgres_ssh
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  mysql-connection:
    image: mysql:8
    restart: always
    container_name: mysql-connection
    ports:
      - 3306:3306
    environment:
      MYSQL_DATABASE: mysql-connection
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./docker/mysql-connection/data:/var/lib/mysql
      - ./docker/mysql-connection/scripts:/docker-entrypoint-initdb.d/
    profiles:
      - quadratic_connection_db
      - quadratic_connection_db_mysql
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  ssh-mysql-connection:
    build:
      context: .
      dockerfile: docker/ssh-mysql-connection/Dockerfile
    restart: always
    container_name: ssh-mysql-connection
    ports:
      - "2223:22"
    environment:
      MYSQL_DATABASE: mysql-connection
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
    volumes:
      - ./docker/mssql-connection/data:/var/opt/mssql
      - ./docker/mssql-connection/scripts:/docker-entrypoint-initdb.d/
    profiles:
      - quadratic_connection_db
      - quadratic_connection_db_mysql_ssh
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # This service covers non-ssh mssql connections as well since it's a complex build
  ssh-mssql-connection:
    build:
      context: .
      platforms:
        - "linux/amd64"
      dockerfile: docker/ssh-mssql-connection/Dockerfile
    restart: always
    container_name: ssh-mssql-connection
    ports:
      - "1433:1433"
      - "2224:22"
    environment:
      MSSQL_SA_PASSWORD: yourStrong(!)Password
      # MSSQL_PID: Evaluation
    volumes:
      - ./docker/ssh-mssql-connection/data:/var/opt/mssql
      - ./docker/ssh-mssql-connection/scripts:/docker-entrypoint-initdb.d/
    profiles:
      - quadratic_connection_db
      - quadratic_connection_db_mssql
      - quadratic_connection_db_mssql_ssh
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  docker:
    name: docker

networks:
  host:
