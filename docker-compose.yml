version: "3.8"

services:
  redis:
    image: redis/redis-stack:latest
    restart: always
    ports:
      - "6379:6379"
      - "8001:8001"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: "5s"
    volumes:
      - ./docker/redis/data:/data
    profiles:
      - base

  postgres:
    image: postgres:15
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      PGUSER: postgres
      POSTGRES_PASSWORD: postgres
      ADDITIONAL_DATABASES: kratos
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./docker/postgres/data:/var/lib/postgresql/data
      - ./docker/postgres/scripts:/docker-entrypoint-initdb.d
    profiles:
      - base

  caddy:
    image: caddy:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/caddy/config/Caddyfile:/etc/caddy/Caddyfile
      - ./docker/caddy/certs:/data/caddy/pki/authorities/local
      # - ./docker/caddy/quadratic-client/html:/srv
    profiles:
      - caddy
      - frontend
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  quadratic-client:
    image: public.ecr.aws/l3i4i9z2/quadratic-client-staging:latest
    restart: "always"
    environment:
      VITE_DEBUG: 1
      VITE_QUADRATIC_API_URL: http://#HOST#:8000
      VITE_QUADRATIC_MULTIPLAYER_URL: ws://#HOST#:3001/ws
      VITE_QUADRATIC_CONNECTION_URL: http://#HOST#:3003
      VITE_AUTH_TYPE: ory
      VITE_ORY_HOST: http://#HOST#:4433
    ports:
      - "3000:80"
    command: >
      sh -c "/client/scripts/replace_env_vars.sh &&
            nginx -g \"daemon off;\""
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://host.docker.internal:3000/ || exit 1"]
      interval: 10s
      timeout: 5s
    volumes:
      - ./docker/client:/client
      - ./docker/client/config/default.conf:/etc/nginx/conf.d/default.conf
      # - ./docker/client/build:/usr/share/nginx/html
    profiles:
      - client
      - frontend
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  quadratic-api:
    image: public.ecr.aws/l3i4i9z2/quadratic-api-staging:latest
    environment:
      CORS: "*"
      DATABASE_URL: "postgresql://postgres:postgres@host.docker.internal:5432/postgres"
      ENVIRONMENT: docker
      STRIPE_SECRET_KEY: STRIPE_SECRET_KEY
      STRIPE_WEBHOOK_SECRET: STRIPE_WEBHOOK_SECRET
      OPENAI_API_KEY:
      M2M_AUTH_TOKEN: M2M_AUTH_TOKEN

      # Hex string to be used as the key for enctyption, use npm run key:generate
      ENCRYPTION_KEY: eb4758047f74bdb2603cce75c4370327ca2c3662c4786867659126da8e64dfcc

      # Auth
      AUTH_TYPE: ory
      ORY_JWKS_URI: "http://host.docker.internal:3000/.well-known/jwks.json"
      ORY_ADMIN_HOST: http://host.docker.internal:4434

      # Storage
      STORAGE_TYPE: file-system
      QUADRATIC_FILE_URI: http://host.docker.internal:3002
      QUADRATIC_FILE_URI_PUBLIC: http://#HOST#:3002

      # License UUID: leave "#LICENSE_KEY#" as this value is replaced during initialization
      LICENSE_KEY: "#LICENSE_KEY#"
    restart: "always"
    ports:
      - "8000:8000"
    command: bash -c "npx prisma migrate deploy --schema quadratic-api/prisma/schema.prisma && npm run start:prod --workspace=quadratic-api"
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - api
      - frontend
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  quadratic-multiplayer:
    image: public.ecr.aws/l3i4i9z2/quadratic-multiplayer-staging:latest
    environment:
      RUST_LOG: info
      HOST: 0.0.0.0
      PORT: 3001
      HEARTBEAT_CHECK_S: 3
      HEARTBEAT_TIMEOUT_S: 600
      QUADRATIC_API_URI: http://host.docker.internal:8000
      M2M_AUTH_TOKEN: M2M_AUTH_TOKEN
      ENVIRONMENT: docker

      PUBSUB_HOST: host.docker.internal
      PUBSUB_PORT: 6379
      PUBSUB_PASSWORD: ""
      PUBSUB_ACTIVE_CHANNELS: active_channels

      AUTH0_JWKS_URI: http://host.docker.internal:3000/.well-known/jwks.json
      AUTHENTICATE_JWT: true
    restart: "always"
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      quadratic-api:
        condition: service_started
      quadratic-client:
        condition: service_healthy
    profiles:
      - backend
      - multiplayer
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  quadratic-files:
    image: public.ecr.aws/l3i4i9z2/quadratic-files-staging:latest
    environment:
      RUST_LOG: info
      HOST: 0.0.0.0
      PORT: 3002
      FILE_CHECK_S: 5
      FILES_PER_CHECK: 1000
      TRUNCATE_FILE_CHECK_S: 60
      TRUNCATE_TRANSACTION_AGE_DAYS: 5 #
      ENVIRONMENT: docker

      AUTH0_JWKS_URI: http://host.docker.internal:3000/.well-known/jwks.json
      QUADRATIC_API_URI: http://host.docker.internal:8000
      M2M_AUTH_TOKEN: M2M_AUTH_TOKEN

      PUBSUB_HOST: host.docker.internal
      PUBSUB_PORT: 6379
      PUBSUB_PASSWORD: ""
      PUBSUB_ACTIVE_CHANNELS: active_channels
      PUBSUB_PROCESSED_TRANSACTIONS_CHANNEL: processed_transactions

      # Storage
      STORAGE_TYPE: file-system # s3 or file-system

      # Storage: s3
      AWS_S3_REGION:
      AWS_S3_BUCKET_NAME: quadratic-api-docker
      AWS_S3_ACCESS_KEY_ID:
      AWS_S3_SECRET_ACCESS_KEY:

      # Storage: file-system
      STORAGE_DIR: /file-storage
      STORAGE_ENCRYPTION_KEYS: eb4758047f74bdb2603cce75c4370327ca2c3662c4786867659126da8e64dfcc

    restart: "always"
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      quadratic-api:
        condition: service_started
      quadratic-client:
        condition: service_healthy
    volumes:
      - ./docker/file-storage:/file-storage
    profiles:
      - backend
      - files
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  quadratic-connection:
    image: public.ecr.aws/l3i4i9z2/quadratic-connection-staging:latest
    environment:
      RUST_LOG: info
      HOST: 0.0.0.0
      PORT: 3003
      ENVIRONMENT: docker

      AUTH0_JWKS_URI: http://host.docker.internal:3000/.well-known/jwks.json
      QUADRATIC_API_URI: http://host.docker.internal:8000
      M2M_AUTH_TOKEN: M2M_AUTH_TOKEN
      MAX_RESPONSE_BYTES: 15728640 # 15MB
      STATIC_IPS: 0.0.0.0,127.0.0.1

    restart: "always"
    ports:
      - "3003:3003"
    depends_on:
      caddy:
        condition: service_started
      quadratic-client:
        condition: service_healthy
    profiles:
      - backend
      - connection
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Auth Providers

  ory-auth:
    image: oryd/kratos:v1.2.0
    ports:
      - "4433:4433" # public
      - "4434:4434" # admin
    command: serve -c /etc/config/kratos/kratos.yml --dev --watch-courier
    volumes:
      - ./docker/ory-auth/config:/etc/config/kratos
    environment:
      DSN: postgresql://postgres:postgres@host.docker.internal:5432/kratos?sslmode=disable
      LOG_LEVEL: trace
    restart: unless-stopped
    depends_on:
      - postgres
      - ory-auth-migrate
    profiles:
      - ory
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  ory-auth-migrate:
    image: oryd/kratos:v1.2.0
    command: migrate -c /etc/config/kratos/kratos.yml sql -e --yes
    volumes:
      - ./docker/ory-auth/config:/etc/config/kratos
    environment:
      DSN: postgresql://postgres:postgres@host.docker.internal:5432/kratos?sslmode=disable
    restart: on-failure
    depends_on:
      - postgres
    profiles:
      - ory
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  ory-auth-node:
    image: oryd/kratos-selfservice-ui-node:v1.2.0
    ports:
      - "4455:4455"
    environment:
      PORT: 4455
      KRATOS_PUBLIC_URL: http://host.docker.internal:4433/
      KRATOS_BROWSER_URL: http://#HOST#:4433/
      COOKIE_SECRET: changeme
      CSRF_COOKIE_NAME: __HOST-#HOST#-x-csrf-token
      CSRF_COOKIE_SECRET: changeme
    restart: on-failure
    profiles:
      - ory
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  ory-auth-mail:
    image: oryd/mailslurper:latest-smtps
    ports:
      - "1025:1025"
      - "4436:4436"
      - "4437:4437"
      - "8080:8080"
    profiles:
      - ory
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  docker:
    name: docker

networks:
  host:
